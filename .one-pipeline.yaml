version: '1'

setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash

    SKIP_SETUP=$(get_env SKIP_SETUP)
    if [[ "$SKIP_SETUP" != 1 ]]; then
      GHE_TOKEN=$(cat "$WORKSPACE/git-token")
      GHE_TOKEN=$(get_env git-token)
      GH_TOKEN=$(get_env git-token-GH)
      OWNER=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.owner_id' /toolchain/toolchain.json)
      REPO=$(jq -r '.services[] | select(.toolchain_binding.name=="app-repo") | .parameters.repo_name' /toolchain/toolchain.json)
      REPO=${REPO%.git}
      REPO=sample-getting-started
      BRANCH=$(get_env branch)
      # The 'owner' is really the org, not the user with admin access to repo
      OWNER=OpenLiberty
      echo "Owner: $OWNER"
      echo "REPO: $REPO"
      echo "BRANCH: $BRANCH"

      curl -u :$GH_TOKEN https://api.github.com/repos/$OWNER/$REPO/branches/$BRANCH/protection -H "Accept: application/vnd.github.v3+json" -X PUT -d '{"required_pull_request_reviews":{"dismiss_stale_reviews":true,"required_approving_review_count":1},"enforce_admins":null,"restrictions":null,"required_status_checks":null}'
   

      // Update repo with Whitesource enabled
      WHITESOURCE_GHE_REPO=$(get_env WHITESOURCE_GHE_REPO)
      WHITESOURCE_GHE_DOMAIN=$(get_env WHITESOURCE_GHE_DOMAIN)
      echo "git push --prune https://$GHE_TOKEN@$WHITESOURCE_GHE_DOMAIN/$WHITESOURCE_GHE_REPO +refs/remotes/origin/$BRANCH:refs/heads/$BRANCH +refs/tags/*:refs/tags/*"
      git push --prune https://$GHE_TOKEN@$WHITESOURCE_GHE_DOMAIN/$WHITESOURCE_GHE_REPO +refs/remotes/origin/$BRANCH:refs/heads/$BRANCH +refs/tags/*:refs/tags/*
    fi

test:
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash
    SKIP_UNIT_TESTS=$(get_env SKIP_UNIT_TESTS)
    if [[ "$SKIP_UNIT_TESTS" != 1 ]]; then
      cd ../"$(load_repo app-repo path)"
      mvn clean package liberty:create liberty:install-feature liberty:test-start liberty:deploy failsafe:integration-test failsafe:verify liberty:test-stop
    fi
    
static-scan:
  abort_on_failure: false
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash
    SKIP_STATIC_SCAN=$(get_env SKIP_STATIC_SCAN)
    if [[ "$SKIP_STATIC_SCAN" != 1 ]]; then
      read -r SONAR_HOST_URL <<< "$(get_env sonarqube | jq -r '.parameters.dashboard_url' | sed 's:/*$::')"
      read -r SONAR_USER <<< "$(get_env sonarqube | jq -r '.parameters.user_login')"
      SONARQUBE_INSTANCE_ID=$(get_env sonarqube | jq -r '.instance_id')
      read -r SONAR_PASS <<< "$(jq -r --arg sonar_instance "$SONARQUBE_INSTANCE_ID" '[.services[] | select(."service_id"=="sonarqube")][] | select(."instance_id"==$sonar_instance) | .parameters.user_password' /toolchain/toolchain.json)"
      touch "$WORKSPACE"/liberty-getting-started/sonar-project.properties
      cat << EOF > "$WORKSPACE"/liberty-getting-started/sonar-project.properties
      sonar.projectKey=liberty-getting-started
      sonar.host.url=$SONAR_HOST_URL
      sonar.sources=.
      sonar.login=$SONAR_USER
      sonar.password=$SONAR_PASS
      sonar.c.file.suffixes=-
      sonar.cpp.file.suffixes=-
      sonar.objc.file.suffixes=-
      EOF
      chmod -x "$WORKSPACE"/liberty-getting-started/sonar-project.properties
      #echo "$SONAR_PASS" >> /tmp/sonarqube-token
      "${ONE_PIPELINE_PATH}"/internal/sonarqube/sonarqube_run
    fi

containerize:
  abort_on_failure: true
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-image:2.12@sha256:ff4053b0bca784d6d105fee1d008cfb20db206011453071e86b69ca3fde706a4
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    
    # Build images
    PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    PIPELINE_PASSWORD=$(get_env ibmcloud-api-key-staging)  
    CONTAINER_REGISTRY=$(get_env CONTAINER_REGISTRY)
    REGISTRY_REPO=$(get_env REGISTRY_REPO)
    RELEASE_TARGET=$(get_env IMAGE_TAG)
    SAVE_IMAGE=$IMAGE
    IMAGE=$CONTAINER_REGISTRY/$REGISTRY_REPO:$RELEASE_TARGET
    ARCH=$(get_env architecture)

    # # build P and Z
    # if [[ "$arch" == "ZXP" ]]; then
    #   echo "<ciorchestrator> Sending request to build P and Z"
    #   ./scripts/pipeline/request-ciorchestrator.sh --command "make build-sample REGISTRY=${CONTAINER_REGISTRY}" --user "$W3_USERNAME" --password "$W3_PASSWORD" --branch "$RELEASE_TARGET" --repository "sample-getting-started" --org "OpenLiberty" --trigger "sample-liberty" --configFile ".ci-orchestrator/sample-liberty-build.yml" 
    #   pipelineid=$(cat ciorchestrator-submit.id)
    # fi

    # preferably next 6 instructions ported to Makefile
    cd ../"$(load_repo app-repo path)"
    mvn package
    
    docker pull icr.io/appcafe/open-liberty:kernel-slim-java11-openj9-ubi
    docker build -t $IMAGE .
    
    # Push image to staging
    echo $PIPELINE_PASSWORD | docker login stg.icr.io -u "$PIPELINE_USERNAME" --password-stdin
    docker push $IMAGE  

    #wait on build for P and Z  
    # if [[ "$arch" == "ZXP" ]]; then
    #   # wait for build ppc64le and s390x images
    #   echo "<ciorchestrator> waiting on request to build P and Z"
    #   ./scripts/pipeline/await-ciorchestrator.sh --user "$W3_USERNAME" --password "$W3_PASSWORD" --pipelineId "$pipelineid"
    # fi   

    # Save artifacts
    echo "**** Saving Artifacts ****"
    if [[ "$arch" == "ZXP" ]]; then
      declare -a tags=("${RELEASE_TARGET}" "${RELEASE_TARGET}-amd64" "${RELEASE_TARGET}-ppc64le" "${RELEASE_TARGET}-s390x")
    else
      declare -a tags=("${RELEASE_TARGET}" "${RELEASE_TARGET}-amd64")
    fi
    for i in "${tags[@]}"
      IMAGE=$SAVE_IMAGE:$i
      DIGEST="$(skopeo inspect docker://$IMAGE | grep Digest | grep -o 'sha[^\"]*')"
      { ARCH="$(echo $i | grep -o '\(amd64\|s390x\|ppc64le\)$')" && TYPE="image"; } || { TYPE="manifest"; }
      if [[ "$TYPE" == "manifest" ]]; then
        echo "Saving artifact operator-$i type=$TYPE name=$IMAGE digest=$DIGEST"
        save_artifact operator-$i type=$TYPE name="$IMAGE" "digest=$DIGEST"
      else
        echo "Saving artifact operator-$i type=$TYPE name=$IMAGE digest=$DIGEST arch=$ARCH"
        save_artifact operator-$i type=$TYPE name="$IMAGE" "digest=$DIGEST" "arch=$ARCH"
      fi
    do
    
 
    
sign-artifact:
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/image-signing:1.0.0@sha256:e9d8e354668ba3d40be2aaee08298d2aa7f0e1c8a1829cca4094ec93830e3e6a
  script: |
    #!/usr/bin/env bash
    echo "Skipping step because it doesn't make sense to sign an image at this step in the flow"

deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    echo "Skipping Deploy"

dynamic-scan: 
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash

    echo "Skipping dynamic-scan"

acceptance-test:
  abort_on_failure: true
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash
    
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    
    PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
    PIPELINE_PASSWORD=$(get_env ibmcloud-api-key-staging)  
    CONTAINER_REGISTRY=$(get_env CONTAINER_REGISTRY "stg.icr.io")
    REGISTRY_REPO=$(get_env REGISTRY_REPO)
    IMAGE_TAG=$(get_env IMAGE_TAG)
    IMAGE=$CONTAINER_REGISTRY/$REGISTRY_REPO:$IMAGE_TAG
    
    echo $PIPELINE_PASSWORD | docker login stg.icr.io -u "$PIPELINE_USERNAME" --password-stdin
    docker pull $IMAGE
    docker images
    
    docker run -d --name getting-started-sample -p 9080:9080 $IMAGE
    docker ps
    
    # Wait for starter planet
    maxWait=30
    count=0
    while [ "$count" != "$maxWait" ] && ! docker logs getting-started-sample | grep -q "CWWKF0011I";
    do
        count=$(( $count + 1 ))
        echo "Waiting for CWWKF0011I (Smarter Planet msg) in log. $count / $maxWait seconds."
        sleep 1
    done

    if [[ "$count" == "$maxWait" ]]; then
      echo "Did not find CWWKF0011I (Smarter Planet msg) in log within $maxWait seconds."
      exit 1;
    fi

    # Test the endpoints for 200 response code
    curl -f -s -I "0.0.0.0:9080" &>/dev/null && echo "OK: Landing page did return 200" || { echo 'FAIL: Sample App landing page did not return 200' ; exit 1; }
    curl -f -s "0.0.0.0:9080" | grep -q '<title>Open Liberty - Getting Started Sample</title>' && echo "OK: Sample App landing page contained '<title>Open Liberty - Getting Started Sample</title>'" || { echo 'FAIL: Did not find "<title>Open Liberty - Getting Started Sample</title>" in response' ; exit 1; }
    curl -f -s -I "0.0.0.0:9080/system/properties" &>/dev/null && echo "OK: /system/properties did return 200" || { echo 'FAIL: /system/properties did not return 200' ; exit 1; }
    curl -f -s -I "0.0.0.0:9080/system/config" &>/dev/null && echo "OK: /system/config did return 200" || { echo 'FAIL: /system/config did not return 200' ; exit 1; }
    curl -f -s -I "0.0.0.0:9080/system/runtime" &>/dev/null && echo "OK: /system/runtime did return 200" || { echo 'FAIL: /system/runtime did not return 200' ; exit 1; }
    curl -f -s -I "0.0.0.0:9080/health" &>/dev/null && echo "OK: /health did return 200" || { echo 'FAIL: /health did not return 200' ; exit 1; }
    curl -f -s "0.0.0.0:9080/metrics" &>/dev/null && echo "OK: /metrics did return 200" || { echo 'FAIL: /metrics did not return 200' ; exit 1; }
    
scan-artifact:
  abort_on_failure: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash

    echo $STAGE

    # ========== Security Scanner ==========
    ./scripts/pipeline/ci_to_secure_pipeline_scan.sh
    
release:
  abort_on_failure: false
  dind: true
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash

    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi

    PUBLISH_IMAGES=$(get_env PUBLISH_IMAGES)
    if [[ "$PUBLISH_IMAGES" == 1 ]]; then
      skopeo --version
      
      PIPELINE_USERNAME=$(get_env ibmcloud-api-user)
      PIPELINE_STAGING_PASSWORD=$(get_env ibmcloud-api-key-staging)  
      PIPELINE_PROD_PASSWORD=$(get_env ibmcloud-api-key)  
      CONTAINER_REGISTRY=$(get_env CONTAINER_REGISTRY)
      REGISTRY_REPO=$(get_env REGISTRY_REPO)
      IMAGE_TAG=$(get_env IMAGE_TAG)
      RELEASE_TARGET=$IMAGE_TAG


      STAGING_IMAGE=$CONTAINER_REGISTRY/$REGISTRY_REPO:$IMAGE_TAG
      
      PROD_CONTAINER_REGISTRY=$(get_env PROD_CONTAINER_REGISTRY)
      PROD_REGISTRY_REPO=$(get_env PROD_REGISTRY_REPO)
      PROD_IMAGE=$PROD_CONTAINER_REGISTRY/$PROD_REGISTRY_REPO:$IMAGE_TAG

      # Copy image to prod
      echo $PIPELINE_STAGING_PASSWORD | docker login stg.icr.io -u "$PIPELINE_USERNAME" --password-stdin
      # echo $PIPELINE_PROD_PASSWORD | docker login icr.io -u "$PIPELINE_USERNAME" --password-stdin


      if [[ "$arch" == "ZXP" ]]; then
        declare -a tags=("${RELEASE_TARGET}" "${RELEASE_TARGET}-amd64" "${RELEASE_TARGET}-ppc64le" "${RELEASE_TARGET}-s390x")
      else
       declare -a tags=("${RELEASE_TARGET}" "${RELEASE_TARGET}-amd64")
      fi
      for i in "${tags[@]}"
        echo "Copying staged image $STAGING_IMAGE to prod at $PROD_IMAGE as user $PIPELINE_USERNAME"
        skopeo copy --src-creds $PIPELINE_USERNAME:$PIPELINE_STAGING_PASSWORD --dest-creds $PIPELINE_USERNAME:$PIPELINE_PROD_PASSWORD docker://$STAGING_IMAGE docker://$PROD_IMAGE

        echo "Validate image is available on icr.io"
        echo $PIPELINE_PROD_PASSWORD | docker login "$PROD_CONTAINER_REGISTRY" -u "$PIPELINE_USERNAME" --password-stdin
        docker pull $PROD_IMAGE
        docker images
        
        docker run -d --name getting-started-sample -p 9080:9080 $PROD_IMAGE
        sleep 5
        docker logs getting-started-sample
      do
    fi

owasp-zap-api:
  dind: true
  abort_on_failure: false
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.12
  script: |
    #!/usr/bin/env bash
    if [[ "$PIPELINE_DEBUG" == 1 ]]; then
      trap env EXIT
      env
      set -x
    fi
    
    echo "Skipping OWASP ZAP API"
